<< 핵심프로젝트 8일차 >>

1. 태그가 선택되지 않았을 때, error 팝업 띄우기
=> 비동기통신 / 프론트에서 구현

2. 이메일 찾기 페이지 구현 (닉네임, 생년월일 정보 입력 받기)

3. 비밀번호 재설정 페이지 구현 및 백엔드 연동 (이메일, 생년월일 정보 입력 받기)

=====================================================================================
4. 회원가입 시, 이메일&닉네임 중복 확인 기능 백엔드에 구현 (Controller, Repository 생성)
-------------------------------------------------------------------------------------
✅ [ RegisterController ]

package com.smhrd.gitest.controller;

import java.util.Collections;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.smhrd.gitest.repository.MemberRepository;

@Controller
@RestController
@RequestMapping("/api")
public class RegisterControlloer {
	@Autowired
    private MemberRepository memberRepository;

    @GetMapping("/check-email")
    public Map<String, Boolean> checkEmail(@RequestParam String value) {
        boolean exists = memberRepository.existsByEmail(value);
        return Collections.singletonMap("duplicate", exists);
    }

    @GetMapping("/check-nickname")
    public Map<String, Boolean> checkNickname(@RequestParam String value) {
        boolean exists = memberRepository.existsByNickname(value);
        return Collections.singletonMap("duplicate", exists);
    }
}
-------------------------------------------------------------------------------------
✅ [ RegisterRepository ]

package com.smhrd.gitest.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.smhrd.gitest.entity.MemberEntity;

@Repository
public interface RegisterRepository extends JpaRepository<MemberEntity, Long>{
	boolean existsByEmail(String email);
    boolean existsByNickname(String nickname);
}
-------------------------------------------------------------------------------------

=====================================================================================
5. 회원가입 시, PW & Repeat-PW 일치 확인 기능 구현
=> 순수 프론트엔드 유효성 검사 로직
-------------------------------------------------------------------------------------
🔍 라인별 상세 설명 (js임. spring boot로 넣을 땐 변환 필요함)
function validateForm() { // validateForm이라는 이름의 함수를 선언,
                          // 이 함수는 <form onsubmit="return validateForm();">와 연결되어 회원가입 버튼 클릭 시 실행됨.
  const pw = document.getElementById("password").value;
  // id="password"인 <input> 요소를 DOM에서 찾고, 그 안에 사용자가 입력한 값을 가져옴.
  // 즉, 사용자가 작성한 첫 번째 비밀번호임.
  // .value는 입력 필드의 값을 의미.
  const pwConfirm = document.getElementById("repeat-password").value;
  // id="repeat-password"인 <input> 요소에서 사용자가 입력한 값을 가져옴.
  // 이는 비밀번호 확인 입력값.
  // 위의 pw와 동일한지 비교하기 위해 사용.

  if (pw !== pwConfirm) { // 입력한 두 비밀번호가 서로 다르면 조건이 참이 됩
    alert("비밀번호가 일치하지 않습니다.");
    return false; // false를 반환하면, <form onsubmit="return validateForm();">에서 form 제출이 중단됨.
                  // 즉, 서버로 전송되지 않도록 막음.
  }
  return true; // 비밀번호가 일치하는 경우 실행.
               // 즉, 서버로 form 데이터가 전송됨.
}
-------------------------------------------------------------------------------------
=> 비밀번호 검증용 클라이언트 유효성 검사 함수임.
=> 사용자가 실수로 잘못된 비밀번호를 입력하는 것을 방지하고, 서버로 불필요한 요청을 보내지 않도록 프론트단에서 사전 차단함.
-------------------------------------------------------------------------------------
💡 추가 확장 아이디어 (js) => 사용자의 비밀번호 보안 수준을 높일 수 있음.

if (pw.length < 8) {
  alert("비밀번호는 8자 이상이어야 합니다.");
  return false;
}

if (!/[0-9]/.test(pw) || !/[!@#$%^&*]/.test(pw)) {
  alert("비밀번호에는 숫자와 특수문자가 포함되어야 합니다.");
  return false;
}
-------------------------------------------------------------------------------------
