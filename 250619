<< 핵심프로젝트 7일차 >>

- JS에서 작업한 html/css/js 파일을 Spring Boot에 병합시키기 !

~~ detail.html을 예시로 사용 ~~

step 1 ) 프로젝트 구조에 맞게 파일 저장
파일명      ->  저장 위치
detail.html -> src/main/resources/templates/detail.html
detail.js   -> src/main/resources/static/detail.js
detail.css  -> src/main/resources/static/detail.css

step 2 ) HTML을 Thymeleaf(타임리프) 템플릿으로 조정
(ex) :
<!-- src/main/resources/templates/detail.html -->
<!DOCTYPE html>
<html lang="ko" xmlns:th="http://www.thymeleaf.org"> # 타임리프 !!
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>술집 상세 정보</title>
    <link rel="stylesheet" href="/css/detail.css" /> # 연결경로가 js랑 spring이랑 다름 !
    <script src="/detail.js" defer></script> # 연결경로 주의 !
  </head>

step 3 ) Spring Boot Controller 설정
(ex) :
@Controller
public class StoreController {

    @GetMapping("/store_detail")
    public String storeDetail() {
        return "detail"; // templates/detail.html
    }
}

step 4 ) detail.js 유지

step 5 ) (선택) goBack() 함수 추가
function goBack() {
  window.location.href = "result.html"; // 혹은 "/result"로 라우팅
}
==> detail.js 내부에서 정의해 주면 됨.

step 6 ) (선택) 서버에서 데이터 전달하도록 변경하고 싶다면 ?
==> 향후에는 localStorage가 아닌 서버에서 store 데이터를 넘기도록 리팩토링할 수 있음.
(ex) :
@GetMapping("/store_detail")
public String storeDetail(@RequestParam String name, Model model) {
    Store store = storeService.findByName(name);
    model.addAttribute("store", store);
    return "detail";
}

==> 그리고 HTML에서는 타임리프 문법으로 바인딩
(ex) :
<h2 th:text="${store.name}">상호명</h2>
<p th:text="${store.address}">주소</p>

